name: Build Packer Custom Image

on:
  push:
    branches:
      - main  # Adjust as needed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Adjust to your Node.js version

      - name: Install dependencies
        run: npm install

      - name: Create .env file
        run: |
          
          echo "PORT=${{ secrets.PORT }}" >> .env

      - name: Create artifact application
        run: zip -r webapp.zip ./*  # Adjust this if you want to zip a specific directory

      - name: Verify zip content
        run: unzip -l webapp.zip

      - name: Upload application artifact
        uses: actions/upload-artifact@v3
        with:
          name: webapp-artifact
          path: webapp.zip  # Path to the zip file created

  build_ami:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Adjust as needed

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: webapp-artifact
          path: ./  # Ensure this is correctly indented

      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install -y packer

      - name: Initialize Packer
        run: |
          packer init aws.pkr.hcl


      - name: Build Packer Image and Capture AMI ID
        run: |
          AMI_OUTPUT=$(packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "aws_source_ami=${{ secrets.AWS_SOURCE_AMI }}" \
            -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
            -var "ssh_username=${{ secrets.SSH_USERNAME }}" \
            -var "ami_name=${{ secrets.AMI_NAME }}" \
            -var "volume_size=${{ secrets.VOLUME_SIZE }}" \
            -var "volume_type=${{ secrets.VOLUME_TYPE }}" \
            -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
            aws.pkr.hcl)
          echo "$AMI_OUTPUT" | tee packer-output.log
          AMI_ID=$(echo "$AMI_OUTPUT" | grep -oP 'ami-\w+')
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "Captured AMI_ID: $AMI_ID"          
                  
  deploy_demo:
    runs-on: ubuntu-latest
    needs: build_ami  # Depends on AMI creation
    steps:
      - name: Configure AWS CLI (Demo Account)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEMO_AWS_REGION }}

      - name: Validate AMI_ID
        run: |
          if [ -z "${{ env.AMI_ID }}" ]; then
            echo "Error: AMI_ID is not set. Please check the Packer build step."
            exit 1
          else
            echo "AMI_ID is set to ${{ env.AMI_ID }}"
          fi

      - name: Create Launch Template Version
        run: |
         aws ec2 create-launch-template-version \
          --launch-template-id "${{ secrets.DEMO_LAUNCH_TEMPLATE_ID }}" \
          --version-description "New version with updated AMI" \
          --launch-template-data '{"ImageId": "'${{ env.AMI_ID }}'"}'

      - name: Trigger Instance Refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.DEMO_AUTOSCALING_GROUP_NAME }}" \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 100}' \
            --query "InstanceRefreshId" --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh to Complete
        run: |
          REFRESH_STATUS="Pending"
          while [ "$REFRESH_STATUS" != "Successful" ] && [ "$REFRESH_STATUS" != "Failed" ]; do
            sleep 30
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{ secrets.DEMO_AUTOSCALING_GROUP_NAME }}" \
              --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" \
              --output text)
            echo "Current refresh status: $REFRESH_STATUS"
          done
          if [ "$REFRESH_STATUS" = "Failed" ]; then
            echo "Instance refresh failed."
            exit 1
          fi

      - name: Notify Success
        run: echo "Deployment completed successfully!"