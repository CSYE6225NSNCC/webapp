name: Build Packer Custom Image

on:
  push:
    branches:
      - main  # Adjust as needed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Adjust to your Node.js version

      - name: Install dependencies
        run: npm install

      - name: Create .env file
        run: |
          
          echo "PORT=${{ secrets.PORT }}" >> .env

      - name: Create artifact application
        run: zip -r webapp.zip ./*  # Adjust this if you want to zip a specific directory

      - name: Verify zip content
        run: unzip -l webapp.zip

      - name: Upload application artifact
        uses: actions/upload-artifact@v3
        with:
          name: webapp-artifact
          path: webapp.zip  # Path to the zip file created

  build_ami:
    runs-on: ubuntu-latest
    needs: build

    outputs:
      ami_id: ${{ steps.capture_ami.outputs.ami_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Adjust as needed

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: webapp-artifact
          path: ./  # Ensure this is correctly indented

      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install -y packer

      - name: Initialize Packer
        run: |
          packer init aws.pkr.hcl
          
          
      - name: Build Packer Image and Capture AMI ID
        run: |
          # Run packer build and capture output
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')  # Generate timestamp in format YYYYMMDDHHMMSS
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "aws_source_ami=${{ secrets.AWS_SOURCE_AMI }}" \
            -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
            -var "ssh_username=${{ secrets.SSH_USERNAME }}" \
            -var "ami_name=${{ secrets.AMI_NAME }}-${TIMESTAMP}" \
            -var "volume_size=${{ secrets.VOLUME_SIZE }}" \
            -var "volume_type=${{ secrets.VOLUME_TYPE }}" \
            -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
            aws.pkr.hcl 2>&1 | tee packer_output.txt

          # Extract AMI ID directly here
          AMI_ID=$(grep -Eo 'ami-[a-z0-9]+' packer_output.txt | tail -n1)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV


      - name: Capture AMI ID
        id: capture_ami
        run: |
          AMI_ID=$(grep -Eo 'ami-[a-z0-9]+' packer_output.txt | tail -n1)
          if [ -z "$AMI_ID" ]; then
            echo "AMI ID not found!"
            exit 1
          fi
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
          echo "Captured AMI ID: $AMI_ID"

                  
  deploy_demo:
    runs-on: ubuntu-latest
    needs: build_ami  # Depends on AMI creation
    steps:
      - name: Configure AWS CLI (Demo Account)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEMO_AWS_REGION }}

      - name: Update Launch Template and ASG
        run: |
            LAUNCH_TEMPLATE_NAME=${{ secrets.LAUNCH_TEMPLATE_NAME }}
            AMI_ID=${{ needs.build_ami.outputs.ami_id }}
  
            # Fetch Launch Template ID
            LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
              --filters "Name=launch-template-name,Values=${LAUNCH_TEMPLATE_NAME}" \
              --query "LaunchTemplates[0].LaunchTemplateId" --output text)
  
            if [ -z "$LAUNCH_TEMPLATE_ID" ]; then
              echo "Launch Template not found: ${LAUNCH_TEMPLATE_NAME}"
              exit 1
            fi
  

            # Create a new Launch Template Version
            NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${LAUNCH_TEMPLATE_ID} \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${AMI_ID}\"}" \
            --query "LaunchTemplateVersion.VersionNumber" --output text)

            if [ -z "$NEW_VERSION" ]; then
              echo "Failed to create a new Launch Template Version."
              exit 1
            fi

            # Update Auto Scaling Group
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --launch-template "LaunchTemplateId=${LAUNCH_TEMPLATE_ID},Version=$NEW_VERSION"



      - name: Start Instance Refresh
        run: |

          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.DEMO_AUTOSCALING_GROUP_NAME }}" \
            --preferences '{ "InstanceWarmup": 300, "MinHealthyPercentage": 100}' \
            --query "InstanceRefreshId" --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

          echo "Starting Instance Refresh for ASG: ${{ secrets.ASG_NAME }}"
            REFRESH_ID=$(aws autoscaling start-instance-refresh \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --strategy Rolling \
              --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
              --query "InstanceRefreshId" \
              --output text)
      
            if [ -z "$REFRESH_ID" ]; then
              echo "Failed to start instance refresh"
              exit 1
            fi
      
            echo "REFRESH_ID=${REFRESH_ID}" >> $GITHUB_ENV
      
   

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            echo "Checking status of Instance Refresh ID: $REFRESH_ID"
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --instance-refresh-ids ${{ env.REFRESH_ID }} \
              --query "InstanceRefreshes[0].Status" \
              --output text)

            echo "Current status: $STATUS"

            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh $STATUS"
              exit 1
            else
              echo "Instance refresh status: $STATUS. Waiting..."
              sleep 60
            fi
          done